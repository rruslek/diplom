{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { setCredentials, logOut } from '../../features/auth/authSlice';\nconst baseQuery = fetchBaseQuery({\n  baseUrl: 'http://localhost:3500',\n  credentials: 'include',\n  prepareHeaders: (headers, _ref) => {\n    let {\n      getState\n    } = _ref;\n    const token = getState().auth.token;\n    if (token) {\n      headers.set(\"authorization\", `Bearer ${token}`);\n    }\n    return headers;\n  }\n});\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n  var _result, _result$error;\n  let result = await baseQuery(args, api, extraOptions);\n  if (((_result = result) === null || _result === void 0 ? void 0 : (_result$error = _result.error) === null || _result$error === void 0 ? void 0 : _result$error.originalStatus) === 403) {\n    console.log('sending refresh token');\n    // send refresh token to get new access token \n    const refreshResult = await baseQuery('/refresh', api, extraOptions);\n    console.log(refreshResult);\n    if (refreshResult !== null && refreshResult !== void 0 && refreshResult.data) {\n      const user = api.getState().auth.user;\n      // store the new token \n      api.dispatch(setCredentials({\n        ...refreshResult.data,\n        user\n      }));\n      // retry the original query with new access token \n      result = await baseQuery(args, api, extraOptions);\n    } else {\n      api.dispatch(logOut());\n    }\n  }\n  return result;\n};\nexport const apiSlice = createApi({\n  baseQuery: baseQueryWithReauth,\n  endpoints: builder => ({})\n});","map":{"version":3,"names":["createApi","fetchBaseQuery","setCredentials","logOut","baseQuery","baseUrl","credentials","prepareHeaders","headers","_ref","getState","token","auth","set","baseQueryWithReauth","args","api","extraOptions","_result","_result$error","result","error","originalStatus","console","log","refreshResult","data","user","dispatch","apiSlice","endpoints","builder"],"sources":["C:/Users/ATOMIC-HEART/Desktop/Diplom/yotasker_front/src/app/api/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { setCredentials, logOut } from '../../features/auth/authSlice'\r\n\r\nconst baseQuery = fetchBaseQuery({\r\n    baseUrl: 'http://localhost:3500',\r\n    credentials: 'include',\r\n    prepareHeaders: (headers, { getState }) => {\r\n        const token = getState().auth.token\r\n        if (token) {\r\n            headers.set(\"authorization\", `Bearer ${token}`)\r\n        }\r\n        return headers\r\n    }\r\n})\r\n\r\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\r\n    let result = await baseQuery(args, api, extraOptions)\r\n\r\n    if (result?.error?.originalStatus === 403) {\r\n        console.log('sending refresh token')\r\n        // send refresh token to get new access token \r\n        const refreshResult = await baseQuery('/refresh', api, extraOptions)\r\n        console.log(refreshResult)\r\n        if (refreshResult?.data) {\r\n            const user = api.getState().auth.user\r\n            // store the new token \r\n            api.dispatch(setCredentials({ ...refreshResult.data, user }))\r\n            // retry the original query with new access token \r\n            result = await baseQuery(args, api, extraOptions)\r\n        } else {\r\n            api.dispatch(logOut())\r\n        }\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nexport const apiSlice = createApi({\r\n    baseQuery: baseQueryWithReauth,\r\n    endpoints: builder => ({})\r\n})"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AACxE,SAASC,cAAc,EAAEC,MAAM,QAAQ,+BAA+B;AAEtE,MAAMC,SAAS,GAAGH,cAAc,CAAC;EAC7BI,OAAO,EAAE,uBAAuB;EAChCC,WAAW,EAAE,SAAS;EACtBC,cAAc,EAAEA,CAACC,OAAO,EAAAC,IAAA,KAAmB;IAAA,IAAjB;MAAEC;IAAS,CAAC,GAAAD,IAAA;IAClC,MAAME,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK;IACnC,IAAIA,KAAK,EAAE;MACPH,OAAO,CAACK,GAAG,CAAC,eAAe,EAAG,UAASF,KAAM,EAAC,CAAC;IACnD;IACA,OAAOH,OAAO;EAClB;AACJ,CAAC,CAAC;AAEF,MAAMM,mBAAmB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,GAAG,EAAEC,YAAY,KAAK;EAAA,IAAAC,OAAA,EAAAC,aAAA;EAC3D,IAAIC,MAAM,GAAG,MAAMhB,SAAS,CAACW,IAAI,EAAEC,GAAG,EAAEC,YAAY,CAAC;EAErD,IAAI,EAAAC,OAAA,GAAAE,MAAM,cAAAF,OAAA,wBAAAC,aAAA,GAAND,OAAA,CAAQG,KAAK,cAAAF,aAAA,uBAAbA,aAAA,CAAeG,cAAc,MAAK,GAAG,EAAE;IACvCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC;IACA,MAAMC,aAAa,GAAG,MAAMrB,SAAS,CAAC,UAAU,EAAEY,GAAG,EAAEC,YAAY,CAAC;IACpEM,OAAO,CAACC,GAAG,CAACC,aAAa,CAAC;IAC1B,IAAIA,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEC,IAAI,EAAE;MACrB,MAAMC,IAAI,GAAGX,GAAG,CAACN,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACe,IAAI;MACrC;MACAX,GAAG,CAACY,QAAQ,CAAC1B,cAAc,CAAC;QAAE,GAAGuB,aAAa,CAACC,IAAI;QAAEC;MAAK,CAAC,CAAC,CAAC;MAC7D;MACAP,MAAM,GAAG,MAAMhB,SAAS,CAACW,IAAI,EAAEC,GAAG,EAAEC,YAAY,CAAC;IACrD,CAAC,MAAM;MACHD,GAAG,CAACY,QAAQ,CAACzB,MAAM,CAAC,CAAC,CAAC;IAC1B;EACJ;EAEA,OAAOiB,MAAM;AACjB,CAAC;AAED,OAAO,MAAMS,QAAQ,GAAG7B,SAAS,CAAC;EAC9BI,SAAS,EAAEU,mBAAmB;EAC9BgB,SAAS,EAAEC,OAAO,KAAK,CAAC,CAAC;AAC7B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}